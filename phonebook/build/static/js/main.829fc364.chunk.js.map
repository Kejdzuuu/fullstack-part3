{"version":3,"sources":["components/Person.js","components/Persons.js","components/Filter.js","components/Notification.js","components/PersonForm.js","services/persons.js","App.js","index.js"],"names":["Person","person","deletePerson","name","number","onClick","id","Persons","persons","map","key","Filter","props","onChange","Notification","message","type","className","PersonForm","onSubmit","addName","value","newName","nameInput","newNumber","numberInput","baseUrl","axios","get","then","response","data","newObject","post","put","delete","App","useState","setPersons","setNewName","setNewNumber","filter","setFilter","notificationMsg","setNotificationMsg","notificationType","setNotificationType","useEffect","personService","filteredPersons","toLowerCase","includes","event","target","preventDefault","newPerson","some","window","confirm","personToReplace","find","n","createdPerson","concat","setTimeout","result","catch","error","ReactDOM","render","document","getElementById"],"mappings":"2NAaeA,EAXA,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,aAGxB,OACE,4BACGD,EAAOE,KADV,IACiBF,EAAOG,OACtB,4BAAQC,QAAS,kBAAMH,EAAaD,EAAOK,MAA3C,YCOSC,EAZC,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,QAASN,EAAmB,EAAnBA,aAG1B,OACE,4BACGM,EAAQC,KAAI,SAAAR,GAAM,OACjB,kBAAC,EAAD,CAAQS,IAAKT,EAAOK,GAAIL,OAAQA,EAAQC,aAAcA,SCC/CS,EARA,SAACC,GACd,OACE,6CACe,2BAAOC,SAAUD,EAAMC,aCa3BC,EAhBM,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,KAC/B,OAAgB,OAAZD,EACK,KAGI,SAATC,GAA4B,UAATA,EAEnB,yBAAKC,UAAWD,GACbD,GAIE,MCOIG,EAnBI,SAACN,GAClB,OACE,6BACE,gDACA,0BAAMO,SAAUP,EAAMQ,SACpB,sCACQ,2BAAOC,MAAOT,EAAMU,QAAST,SAAUD,EAAMW,aAErD,wCACU,2BAAOF,MAAOT,EAAMY,UAAWX,SAAUD,EAAMa,eAEzD,6BACE,4BAAQT,KAAK,UAAb,W,gBCbJU,EAAU,eAsBD,EApBA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAkB5B,EAfA,SAACC,GAEd,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAACzB,EAAI0B,GAElB,OADgBL,IAAMO,IAAN,UAAaR,EAAb,YAAwBpB,GAAM0B,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACzB,GAEd,OADgBqB,IAAMQ,OAAN,UAAgBT,EAAhB,YAA2BpB,IAC5BuB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC2F5BK,EAxGH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACR7B,EADQ,KACC8B,EADD,OAEgBD,mBAAS,IAFzB,mBAERf,EAFQ,KAECiB,EAFD,OAGoBF,mBAAS,IAH7B,mBAGRb,EAHQ,KAGGgB,EAHH,OAIcH,mBAAS,IAJvB,mBAIRI,EAJQ,KAIAC,EAJA,OAKgCL,mBAAS,MALzC,mBAKRM,EALQ,KAKSC,EALT,OAMkCP,mBAAS,IAN3C,mBAMRQ,EANQ,KAMUC,EANV,KAQhBC,qBAAU,WACRC,IAEGnB,MAAK,SAAArB,GACJ8B,EAAW9B,QAEd,IAEH,IAuEMyC,EAAkBzC,EAAQiC,QAAO,SAAAxC,GAAM,OAC3CA,EAAOE,KAAK+C,cAAcC,SAASV,EAAOS,kBAG5C,OACE,6BACE,yCACA,kBAAC,EAAD,CAAcnC,QAAS4B,EAAiB3B,KAAM6B,IAC9C,kBAAC,EAAD,CAAQhC,SAZc,SAACuC,GACzBV,EAAUU,EAAMC,OAAOhC,UAYrB,kBAAC,EAAD,CAAYD,QAhFA,SAACgC,GACfA,EAAME,iBAEN,IAAMC,EAAY,CAChBpD,KAAMmB,EACNlB,OAAQoB,GAGV,GAAIhB,EAAQgD,MAAK,SAASvD,GAAS,OAAOA,EAAOE,OAASmB,MAGxD,GAFemC,OAAOC,QAAQ,yBAElB,CACV,IAAMC,EAAkBnD,EAAQoD,MAAK,SAAAC,GAAC,OAAIA,EAAE1D,OAASmB,KAErD0B,EACUW,EAAgBrD,GAAIiD,GAC3B1B,MAAK,SAAAiC,GACJxB,EAAW9B,EAAQiC,QAAO,SAAAoB,GAAC,OAAIA,EAAE1D,OAASmB,KAASyC,OAAOD,IAC1DvB,EAAW,IACXC,EAAa,aAInBQ,EACUO,GACP1B,MAAK,SAAAiC,GACJxB,EAAW9B,EAAQuD,OAAOD,IAC1BhB,EAAoB,QACpBF,EAAmB,SAAD,OAAUtB,IAC5B0C,YAAW,WACTpB,EAAmB,QAClB,KACHL,EAAW,IACXC,EAAa,QA+CalB,QAASA,EAASE,UAAWA,EACnDD,UAtBY,SAAC6B,GACvBb,EAAWa,EAAMC,OAAOhC,QAqBcI,YAlBd,SAAC2B,GACzBZ,EAAaY,EAAMC,OAAOhC,UAkBxB,uCACA,kBAAC,EAAD,CAASb,QAASyC,EAAiB/C,aA7CpB,SAACI,GAClB,IAAM2D,EAASR,OAAOC,QAAQ,mBACxBzD,EAASO,EAAQoD,MAAK,SAAAC,GAAC,OAAIA,EAAEvD,KAAOA,KAEtC2D,GACFjB,EACU1C,GACPuB,MAAK,kBACJS,EAAW9B,EAAQiC,QAAO,SAAAoB,GAAC,OAAIA,EAAEvD,KAAOA,SAEzC4D,OAAM,SAAAC,GACLrB,EAAoB,SACpBF,EAAmB,kBAAD,OAAmB3C,EAAOE,KAA1B,qCAClB6D,YAAW,WACTpB,EAAmB,QAClB,KACHN,EAAW9B,EAAQiC,QAAO,SAAAoB,GAAC,OAAIA,EAAEvD,KAAOA,cCxElD8D,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.829fc364.chunk.js","sourcesContent":["import React from 'react'\n\nconst Person = ({ person, deletePerson }) => {\n\n\n  return (\n    <li>\n      {person.name} {person.number}\n      <button onClick={() => deletePerson(person.id)}>remove</button>\n    </li>\n  )\n}\n\nexport default Person","import React from 'react'\nimport Person from './Person'\n\nconst Persons = ({ persons, deletePerson }) => {\n\n\n  return (\n    <ul>\n      {persons.map(person =>\n        <Person key={person.id} person={person} deletePerson={deletePerson} />\n      )}\n    </ul>\n  )\n}\n\nexport default Persons","import React from 'react'\n\nconst Filter = (props) => {\n  return (\n    <div>\n      filter names <input onChange={props.onChange} />\n    </div>\n  )\n}\n\nexport default Filter","import React from 'react'\n\nconst Notification = ({ message, type }) => {\n  if (message === null) {\n    return null\n  }\n\n  if (type === 'info' || type === 'error') {\n    return (\n      <div className={type}>\n        {message}\n      </div>\n    )\n  } else {\n    return null\n  }\n}\n\nexport default Notification","import React from 'react'\n\nconst PersonForm = (props) => {\n  return (\n    <div>\n      <h2>Add a new person</h2>\n      <form onSubmit={props.addName}>\n        <div>\n          name: <input value={props.newName} onChange={props.nameInput} />\n        </div>\n        <div>\n          number: <input value={props.newNumber} onChange={props.numberInput} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nexport default PersonForm","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, remove }","import React, { useState, useEffect } from 'react'\nimport Persons from './components/Persons'\nimport Filter from './components/Filter'\nimport Notification from './components/Notification'\nimport PersonForm from './components/PersonForm'\nimport personService from './services/persons'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ notificationMsg, setNotificationMsg ] = useState(null)\n  const [ notificationType, setNotificationType ] = useState('')\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(persons => {\n        setPersons(persons)\n      })\n  }, [])\n\n  const addName = (event) => {\n    event.preventDefault()\n\n    const newPerson = {\n      name: newName,\n      number: newNumber\n    }\n\n    if (persons.some(function(person) {return person.name === newName})) {\n      const result = window.confirm('Replace phone number?')\n\n      if (result) {\n        const personToReplace = persons.find(n => n.name === newName)\n\n        personService\n          .update(personToReplace.id, newPerson)\n          .then(createdPerson => {\n            setPersons(persons.filter(n => n.name !== newName).concat(createdPerson))\n            setNewName('')\n            setNewNumber('')\n          })\n      }\n    } else {\n      personService\n        .create(newPerson)\n        .then(createdPerson => {\n          setPersons(persons.concat(createdPerson))\n          setNotificationType('info')\n          setNotificationMsg(`Added ${newName}`)\n          setTimeout(() => {\n            setNotificationMsg(null)\n          }, 3000)\n          setNewName('')\n          setNewNumber('')\n        })\n    }\n  }\n\n  const deleteName = (id) => {\n    const result = window.confirm('Delete contact?')\n    const person = persons.find(n => n.id === id)\n    \n    if (result) {\n      personService\n        .remove(id)\n        .then(() =>\n          setPersons(persons.filter(n => n.id !== id))\n        )\n        .catch(error => {\n          setNotificationType('error')\n          setNotificationMsg(`Information on ${person.name} was already deleted from server`)\n          setTimeout(() => {\n            setNotificationMsg(null)\n          }, 3000)\n          setPersons(persons.filter(n => n.id !== id))\n        })\n    }\n  }\n\n  const handleNameInput = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberInput = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterInput = (event) => {\n    setFilter(event.target.value)\n  }\n  \n  const filteredPersons = persons.filter(person =>\n    person.name.toLowerCase().includes(filter.toLowerCase())\n  )\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notificationMsg} type={notificationType} />\n      <Filter onChange={handleFilterInput} />\n      <PersonForm addName={addName} newName={newName} newNumber={newNumber}\n              nameInput={handleNameInput} numberInput={handleNumberInput} />\n      <h2>Numbers</h2>\n      <Persons persons={filteredPersons} deletePerson={deleteName} />\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}